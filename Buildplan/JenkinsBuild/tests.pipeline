pipeline {
  agent any

  environment {
    full_image_name = "011954687103.dkr.ecr.us-east-1.amazonaws.com/wordpress-connector-build"
  }

  stages {
    stage('Run tests') {
      steps {
        sh 'eval $(aws ecr get-login --region us-east-1 --no-include-email)'
        sh "docker run --rm -w \"${WORKSPACE}\" -v \"${WORKSPACE}:/${WORKSPACE}\" -e GITHUB_OAUTH=${params.GITHUB_OAUTH} -e PROJECT_ID=${params.PROJECT_ID} -e USER_IDENTIFIER=${params.USER_IDENTIFIER} -e TOKEN_SECRET=${params.TOKEN_SECRET} ${full_image_name}:latest"
      }
    }

    stage('Fix phpunit artifacts') {
      steps {
        sh "sed -i 's/tests\/IntegrationTests\/src\/wp-content\/plugins\/smartling-connector\///g' tests/phpunit-results.xml"
        sh "sed -i 's/tests\/IntegrationTests\/src\/wp-content\/plugins\/smartling-connector\///g' tests/phpunit-coverage.xml"
        sh "cat tests/phpunit-results.xml"
        sh "cat tests/phpunit-coverage.xml"
      }
    }

    stage('Junit') {
      steps {
        junit 'tests/phpunit-results.xml'
      }
    }

    stage('Sonar') {
      steps {
        script {
          String scannerHome = tool name: 'sonar', type: 'hudson.plugins.sonar.SonarRunnerInstallation';
          withSonarQubeEnv('sonar') {
            sh "${scannerHome}/bin/sonar-scanner -Dsonar.sources=\"${WORKSPACE}/tests/IntegrationTests/src/wp-content/plugins/smartling-connector/inc/Smartling\" -Dsonar.exclusions=\"${WORKSPACE}/tests/IntegrationTests/src/wp-content/plugins/smartling-connector/inc/third-party/,${WORKSPACE}/tests/IntegrationTests/src/wp-content/plugins/smartling-connector/tests/,${WORKSPACE}/tests/IntegrationTests/src/wp-admin/\" -Dsonar.projectKey=\"${params.SONAR_PROJECT_KEY}\" -Dsonar.projectName=\"${params.SONAR_PROJECT_NAME}\" -Dsonar.projectVersion=${env.BUILD_NUMBER} -Dsonar.language=php -Dsonar.php.file.suffixes=\"php\" -Dsonar.php.tests.reportPath=\"${WORKSPACE}/tests/phpunit-results.xml\" -Dsonar.php.coverage.reportPaths=\"${WORKSPACE}/tests/phpunit-coverage.xml\""
          }
        }
      }
    }

    stage("Quality Gate") {
      steps {
        script {
          try {
            timeout(time: 5, unit: 'MINUTES') {
              def qg = waitForQualityGate()
              if (qg.status != 'OK') {
                error "Pipeline aborted due to quality gate failure"
              }
            }
          }
          catch (err) {
            // Catch timeout exception but not Quality Gate.
            String errorString = err.getMessage();

            if (errorString == "Pipeline aborted due to quality gate failure") {
              error errorString
            }
          }
        }
      }
    }

    stage('Clean up') {
      steps {
        deleteDir()
      }
    }
  }

  post {
    unstable {
      slackSend (
        channel: "${params.SLACK_CHAT}",
        color: 'bad',
        message: "Tests failed: <${env.BUILD_URL}|${env.JOB_BASE_NAME} #${env.BUILD_NUMBER}>"
      )
    }

    failure {
      slackSend (
        channel: "${params.SLACK_CHAT}",
        color: 'bad',
        message: "Build of <${env.BUILD_URL}|${env.JOB_BASE_NAME} #${env.BUILD_NUMBER}> is failed!"
      )
    }
  }
}
