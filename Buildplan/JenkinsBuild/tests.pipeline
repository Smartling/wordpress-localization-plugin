pipeline {
  agent any

  environment {
    full_image_name = "011954687103.dkr.ecr.us-east-1.amazonaws.com/wordpress-connector-build"
    sonar_project_key = "wordpress-connector:master"
    sonar_project_name = "wordpress-connector"
  }

  stages {
    stage('Run tests') {
      steps {
        withCredentials([string(credentialsId: 'GITHUB_OAUTH', variable: 'GITHUB_OAUTH'), string(credentialsId: 'PROJECT_ID', variable: 'PROJECT_ID'), string(credentialsId: 'USER_IDENTIFIER', variable: 'USER_IDENTIFIER'), string(credentialsId: 'TOKEN_SECRET', variable: 'TOKEN_SECRET')]) {
          sh 'eval $(aws ecr get-login --region us-east-1 --no-include-email)'
          sh "docker run --rm -w \"${WORKSPACE}\" -v \"${WORKSPACE}:/${WORKSPACE}\" -e GITHUB_OAUTH=${GITHUB_OAUTH} -e PROJECT_ID=${PROJECT_ID} -e USER_IDENTIFIER=${USER_IDENTIFIER} -e TOKEN_SECRET=${TOKEN_SECRET} ${full_image_name}:latest"
        }
      }
    }

    stage('Fix phpunit artifacts') {
      steps {
        sh "sed -i \"s/tests\\/IntegrationTests\\/src\\/wp-content\\/plugins\\/smartling-connector\\///g\" tests/phpunit-results.xml"
        sh "sed -i \"s/tests\\/IntegrationTests\\/src\\/wp-content\\/plugins\\/smartling-connector\\///g\" tests/phpunit-coverage.xml"
      }
    }

    stage('Junit') {
      steps {
        junit 'tests/phpunit-results.xml'
      }
    }

    stage('Sonar') {
      steps {
        script {
          String scannerHome = tool name: 'sonar', type: 'hudson.plugins.sonar.SonarRunnerInstallation';
          withSonarQubeEnv('sonar') {
            sh "${scannerHome}/bin/sonar-scanner -Dsonar.sources=\"${WORKSPACE}/inc/Smartling\" -Dsonar.coverage.exclusions=\"${WORKSPACE}/inc/Smartling/WP/View/**, ${WORKSPACE}/inc/Smartling/DbAl/Migrations/**\" -Dsonar.projectKey=\"${sonar_project_key}\" -Dsonar.projectName=\"${sonar_project_name}\" -Dsonar.projectVersion=${env.BUILD_NUMBER} -Dsonar.language=php -Dsonar.php.file.suffixes=\"php\" -Dsonar.php.tests.reportPath=\"${WORKSPACE}/tests/phpunit-results.xml\" -Dsonar.php.coverage.reportPaths=\"${WORKSPACE}/tests/phpunit-coverage.xml\""
          }
        }
      }
    }

    stage("Quality Gate") {
      steps {
        script {
          def qg = null

          try {
            timeout(time: 5, unit: 'MINUTES') {
              qg = waitForQualityGate()
            }
          }
          catch (hudson.AbortException err) {
            echo 'Got timeout error for Sonar. Continue build without Sonar results'
            qg = null
          }

          if (qg != null && qg.status != 'OK') {
            error "Pipeline aborted due to quality gate failure: ${qg.status}"
          }
        }
      }
    }

    stage('Clean up') {
      steps {
        deleteDir()
      }
    }
  }

  post {
    unstable {
      slackSend (
        channel: "#emergency-connectors",
        color: 'bad',
        message: "Tests failed: <${env.BUILD_URL}|${env.JOB_BASE_NAME} #${env.BUILD_NUMBER}>"
      )
    }

    failure {
      slackSend (
        channel: "#emergency-connectors",
        color: 'bad',
        message: "Build of <${env.BUILD_URL}|${env.JOB_BASE_NAME} #${env.BUILD_NUMBER}> is failed!"
      )
    }
  }
}
