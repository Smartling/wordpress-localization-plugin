pipeline {
  agent any

  environment {
    full_image_name = "php-5.6-wordpress-connector-wp-${WP_VERSION}-acf-${ACF_PRO_VERSION}"
    sonar_project_key = "wordpress-connector:master"
    sonar_project_name = "wordpress-connector"
  }

  stages {
    stage('Build Docker image') {
      steps {
        withCredentials([string(credentialsId: 'GITHUB_OAUTH', variable: 'GITHUB_OAUTH'), string(credentialsId: 'ACF_PRO_KEY', variable: 'ACF_PRO_KEY')]) {
          sh "docker build --no-cache --rm --pull --tag=${full_image_name} -f \"Buildplan/php-5.6/Dockerfile\" --build-arg ACFPRO_KEY=\"${ACF_PRO_KEY}\" --build-arg WP_VERSION=\"${WP_VERSION}\" --build-arg ACF_PRO_VERSION=\"${ACF_PRO_VERSION}\" --build-arg GITHUB_OAUTH_TOKEN=\"${GITHUB_OAUTH}\" ."
        }
      }
    }

    stage('Run tests') {
      steps {
        withCredentials([string(credentialsId: 'PROJECT_ID', variable: 'PROJECT_ID'), string(credentialsId: 'USER_IDENTIFIER', variable: 'USER_IDENTIFIER'), string(credentialsId: 'TOKEN_SECRET', variable: 'TOKEN_SECRET')]) {
          sh "docker run --rm -w \"/plugin-dir\" -v \"${WORKSPACE}:/plugin-dir\" -e MYSQL_HOST=\"localhost\" -e CRE_PROJECT_ID=\"${PROJECT_ID}\" -e CRE_USER_IDENTIFIER=\"${USER_IDENTIFIER}\" -e CRE_TOKEN_SECRET=\"${TOKEN_SECRET}\" ${full_image_name}:latest"
        }
      }
    }

    stage('Fix phpunit artifacts') {
      steps {
        sh "sed -i \"s/\\/plugin-dir\\///g\" tests/phpunit-results.xml"
        sh "sed -i \"s/\\/plugin-dir\\///g\" tests/phpunit-coverage.xml"
      }
    }

    stage('Junit') {
      steps {
        junit 'tests/phpunit-results.xml'
      }
    }

    stage('Sonar') {
      steps {
        script {
          String scannerHome = tool name: 'sonar', type: 'hudson.plugins.sonar.SonarRunnerInstallation';
          withSonarQubeEnv('sonar') {
            sh "${scannerHome}/bin/sonar-scanner -Dsonar.sources=\"${WORKSPACE}/inc/Smartling\" -Dsonar.coverage.exclusions=\"${WORKSPACE}/inc/Smartling/WP/View/**, ${WORKSPACE}/inc/Smartling/DbAl/Migrations/**\" -Dsonar.projectKey=\"${sonar_project_key}\" -Dsonar.projectName=\"${sonar_project_name}\" -Dsonar.projectVersion=${env.BUILD_NUMBER} -Dsonar.language=php -Dsonar.php.file.suffixes=\"php\" -Dsonar.php.tests.reportPath=\"${WORKSPACE}/tests/phpunit-results.xml\" -Dsonar.php.coverage.reportPaths=\"${WORKSPACE}/tests/phpunit-coverage.xml\""
          }
        }
      }
    }

    stage("Quality Gate") {
      steps {
        script {
          try {
            timeout(time: 5, unit: 'MINUTES') {
              def qg = waitForQualityGate()
              if (qg.status != 'OK') {
                error "Pipeline aborted due to quality gate failure"
              }
            }
          } catch (err) {
            // Catch timeout exception but not Quality Gate.
            String errorString = err.getMessage();
            if (errorString == "Pipeline aborted due to quality gate failure") {
              error errorString
            }
          }
        }
      }
    }
  }

  post {
    always {
        sh "docker rmi ${full_image_name}"
        deleteDir()
    }
  }
}
